from __future__ import annotations
import json, os, re
from typing import Dict, Tuple, List

from core.model_router import pick_model, CallHints
from core.llm_client import call_openai
from utils.providers import get_active_model
from app_builder.spec import AppSpec, PageSpec
from app_builder.codegen import render_streamlit_app

PROMPT = """You are a senior product manager and software architect.
From the user's idea below, output a concise JSON spec for a Streamlit app.

Constraints:
- Keep scope small but complete.
- 2â€“5 pages max.
- Prefer built-in Streamlit components.
- Include a short, human-friendly app name.

Return strictly JSON with keys:
{{
  "name": "...",
  "description": "...",
  "pages": [{{"name": "...", "purpose": "..."}}],
  "python_packages": ["optional", "extra", "deps"]
}}

Idea:
{idea}
"""

def plan_app_spec(idea: str, packages_extra: List[str] | None = None) -> AppSpec:
    _prov, default_model = get_active_model("standard")
    sel = pick_model(CallHints(stage="plan", difficulty="normal"))
    sel_model = sel.get("model") or default_model
    messages = [
        {"role": "system", "content": "You turn app ideas into minimal JSON specifications."},
        {"role": "user", "content": PROMPT.format(idea=idea)},
    ]
    result = call_openai(
        model=sel_model,
        messages=messages,
        **sel.get("params", {})
    )
    content = result["text"] or ""
    try:
        data = json.loads(content)
    except Exception:
        # retry once with strict JSON reminder
        retry_messages = [
            messages[0],
            {"role": "system", "content": "Return ONLY valid JSON."},
            messages[1],
        ]
        result = call_openai(
            model=sel["model"],
            messages=retry_messages,
            **sel.get("params", {})
        )
        content = result["text"] or ""
        try:
            data = json.loads(content)
        except Exception:
            m = re.search(r"\{[\s\S]*\}", content)
            if not m:
                raise
            data = json.loads(m.group(0))
    pages = [PageSpec(**p) for p in data.get("pages", [])]
    spec = AppSpec(
        name=data.get("name", "Streamlit App"),
        description=data.get("description", "Generated by App Builder"),
        pages=pages,
        python_packages=list(dict.fromkeys(
            data.get("python_packages", []) + (packages_extra or [])
        )),
    )
    return spec

def build_app_from_idea(
    idea: str, packages_extra: List[str] | None = None, write_to_disk: bool = True
) -> Tuple[AppSpec, Dict[str, str]]:
    spec = plan_app_spec(idea, packages_extra=packages_extra)
    files = render_streamlit_app(spec)
    if write_to_disk:
        for path, content in files.items():
            full = os.path.join(".", path)
            os.makedirs(os.path.dirname(full), exist_ok=True)
            with open(full, "w", encoding="utf-8") as f:
                f.write(content)
    return spec, files
