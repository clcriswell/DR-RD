from __future__ import annotations

import os
from concurrent.futures import ThreadPoolExecutor
from dataclasses import asdict
from typing import Dict

from jinja2 import Template

from .spec import AppSpec, PageSpec

APP_TEMPLATE = Template(
    """\
import streamlit as st

st.set_page_config(page_title='{{ name }}', layout='wide')
st.title('{{ name }}')
st.write('{{ description }}')

st.sidebar.success('Generated by App Builder')
"""
)

PAGE_TEMPLATE = Template(
    """\
import streamlit as st

st.title('{{ page.name }}')
st.write('{{ page.purpose }}')
"""
)

README_TEMPLATE = Template(
    """\
# {{ name }}

{{ description }}

## How to run

```bash
pip install -r requirements.txt
streamlit run app.py
```
"""
)
REQS_TEMPLATE = Template(
    """
streamlit
{% for pkg in python_packages -%}
{{ pkg }}
{% endfor -%}
"""
)


def render_streamlit_app(spec: AppSpec) -> Dict[str, str]:
    slug = spec.slug
    base = f"generated_apps/{slug}"
    files: Dict[str, str] = {}
    files[f"{base}/app.py"] = APP_TEMPLATE.render(**asdict(spec))
    files[f"{base}/README.md"] = README_TEMPLATE.render(**asdict(spec))
    files[f"{base}/requirements.txt"] = REQS_TEMPLATE.render(
        python_packages=spec.python_packages
    )
    os.makedirs(f"{base}/pages", exist_ok=True)

    def render_page(p: PageSpec):
        fname = p.name.replace(" ", "_")
        return f"{base}/pages/{fname}.py", PAGE_TEMPLATE.render(page=asdict(p))

    with ThreadPoolExecutor() as ex:
        for path, content in ex.map(render_page, spec.pages):
            files[path] = content
    for path, content in (spec.extra_files or {}).items():
        files[f"{base}/{path}"] = content
    return files
