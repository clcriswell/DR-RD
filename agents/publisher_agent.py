from __future__ import annotations
import io, os, zipfile, json
from typing import Tuple, Dict, Any
import requests  # added to requirements

def make_zip_bytes(app_root: str) -> bytes:
    buf = io.BytesIO()
    with zipfile.ZipFile(buf, "w", compression=zipfile.ZIP_DEFLATED) as z:
        for base, _, files in os.walk(app_root):
            for f in files:
                p = os.path.join(base, f)
                z.write(p, arcname=os.path.relpath(p, start=os.path.dirname(app_root)))
    buf.seek(0)
    return buf.read()

def write_publishing_md(app_root: str, repo_name: str) -> str:
    md = f"""# Publishing {repo_name}

## Quick start
1. Create a new GitHub repo named `{repo_name}` (empty).
2. Locally:
```bash
git init
git remote add origin https://github.com/<you>/{repo_name}.git
git add .
git commit -m "init: generated by DR-RD App Builder"
git branch -M main
git push -u origin main
```
Streamlit Cloud
• Main file path: app.py
• Add secrets (OPENAI_API_KEY, etc.)
"""
    path = os.path.join(app_root, "PUBLISHING.md")
    with open(path, "w", encoding="utf-8") as f:
        f.write(md)
    return path

def try_create_github_repo(repo_name: str, description: str, token: str, private: bool = False) -> Tuple[bool, Dict[str, Any]]:
    url = "https://api.github.com/user/repos"
    headers = {"Authorization": f"token {token}", "Accept": "application/vnd.github+json"}
    payload = {"name": repo_name, "description": description, "private": private, "has_issues": True, "auto_init": False}
    try:
        r = requests.post(url, headers=headers, data=json.dumps(payload), timeout=30)
        ok = r.status_code in (201, 202)
        return ok, r.json() if r.text else {}
    except Exception as e:
        return False, {"error": str(e)}

